unit FPSocketReceiver;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, ctypes, Sockets, SyncObjs;

const BUFFERSIZE = 1024;

type
  TFPSocketReceiver      = class (TThread)
  private
    FSocket    : cint;
    FBuffer    : array [0..BUFFERSIZE-1] of byte;
    FBufferSize: Integer;
    FBufferLock: TCriticalSection;
    FOnReceive : TNotifyEvent;
  protected
    procedure Execute; override;
  public
    constructor Create(ASocket: cint);
    destructor Destroy; override;
    function Receive(var Value): Integer;

    property OnReceive: TNotifyEvent read FOnReceive write FOnReceive;
  end;

implementation

{%REGION TFPSocketReceiver}

constructor TFPSocketReceiver.Create(ASocket: cint);
begin
  inherited Create(false);
  FreeOnTerminate:=false;
  FSocket:=ASocket;
  FBufferSize:=0;
  FBufferLock:=TCriticalSection.Create;
end;

destructor TFPSocketReceiver.Destroy;
begin
  CloseSocket(FSocket);
  FBufferLock.Destroy;
  inherited Destroy;
end;

function TFPSocketReceiver.Receive(var Value): Integer;
begin
  FBufferLock.Enter;

  Move(FBuffer, Value, FBufferSize);
  FBufferSize:=0;
  if Terminated then Start;

  FBufferLock.Leave;
end;

procedure TFPSocketReceiver.Execute;
var
  Val  : Byte;
  ASize: Integer;
begin
  while not Terminated do begin
    ASize:=fprecv(FSocket, @Val, 1, 0);
    if ASize < 0 then raise Exception.Create('Could not receive data');
    if ASize = 1 then begin
      FBufferLock.Enter;

      FBuffer[FBufferSize]:=Val;
      Inc(FBufferSize);
      if FBufferSize >= BUFFERSIZE then begin
        FBufferLock.Leave;
        exit;
      end;

      FBufferLock.Leave;

      if Assigned(FOnReceive)
        then FOnReceive(Self);
    end;
  end;
  FreeOnTerminate:=true;
end;

{%ENDREGION}

end.

